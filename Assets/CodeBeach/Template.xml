<template>
	<MonoBehaviour>
		<method name="Awake" override="true" tag="Common">
			<comment>Awake is called when the script instance is being loaded</comment>
		</method>
		<method name="FixedUpdate" tag="Common">
			<comment>FixedUpdate is called every fixed framerate frame, if the MonoBehaviour is enabled</comment>
		</method>
		<method name="LateUpdate" tag="Common">
			<comment>LateUpdate is called every frame, if the Behaviour is enabled</comment>
		</method>
		<method name="OnApplicationFocus" tag="Common">
			<comment>OnApplicationFocus sent to all game objects when the player gets or loses focus</comment>
		</method>
		<method name="OnApplicationPause" tag="Common">
			<comment>OnApplicationPause sent to all game objects when the player pauses</comment>
		</method>
		<method name="OnApplicationQuit" tag="Common">
			<comment>OnApplicationQuit sent to all game objects before the application is quit</comment>
		</method>
		<method name="OnCollisionEnter" tag="Common">
			<parameter name="collision" type="UnityEngine.Collision"/>
			<comment>OnCollisionEnter is called when this collider/rigidbody has begun touching another rigidbody/collider</comment>
		</method>
		<method name="OnDestroy" tag="Common">
			<comment>OnDestroy is called when the MonoBehaviour will be destroyed</comment>
		</method>
		<method name="OnDisable" tag="Common">
			<comment>OnDisable is called when the behaviour becomes disabled or inactive</comment>
		</method>
		<method name="OnEnable" tag="Common">
			<comment>OnEnable is called when the object becomes enabled and active</comment>
		</method>
		<method name="OnGUI" tag="Common">
			<comment>OnGUI is called for rendering and handling GUI events</comment>
		</method>
		<method name="OnLevelWasLoaded" tag="Common">
			<parameter name="level" type="System.Int32"/>
			<comment>OnLevelWasLoaded is called after a new level was loaded</comment>
		</method>
		<method name="Start" tag="Common">
			<comment>Start is called on the frame when a script is enabled just before any of the Update methods is called the first time</comment>
		</method>
		<method name="Update" tag="Common">
			<comment>Update is called every frame, if the MonoBehaviour is enabled</comment>
		</method>
		<method name="OnConnectedToServer" tag="Network">
			<comment>OnConnectedToServer is called on the client when you have successfully connected to a server</comment>
		</method>
		<method name="OnDisconnectedFromServer" tag="Network">
			<parameter name="info" type="UnityEngine.NetworkDisconnection"/>
			<comment>OnDisconnectedFromServer is called on the client when the connection was lost or you disconnected from the server</comment>
		</method>
		<method name="OnFailedToConnect" tag="Network">
			<parameter name="error" type="UnityEngine.NetworkConnectionError"/>
			<comment>OnFailedToConnect is called on the client when a connection attempt fails for some reason</comment>
		</method>
		<method name="OnFailedToConnectToMasterServer" tag="Network">
			<parameter name="info" type="UnityEngine.NetworkConnectionError"/>
			<comment>OnFailedToConnectToMasterServer is called on clients or servers when there is a problem connecting to the MasterServer</comment>
		</method>
		<method name="OnMasterServerEvent" tag="Network">
			<parameter name="msEvent" type="UnityEngine.MasterServerEvent"/>
			<comment>OnMasterServerEvent is called on clients or servers when reporting events from the MasterServer</comment>
		</method>
		<method name="OnNetworkInstantiate" tag="Network">
			<parameter name="info" type="UnityEngine.NetworkMessageInfo"/>
			<comment>OnNetworkInstantiate is called on objects which have been network instantiated with Network.Instantiate</comment>
		</method>
		<method name="OnPlayerConnected" tag="Network">
			<parameter name="player" type="UnityEngine.NetworkPlayer"/>
			<comment>OnPlayerConnected is called on the server whenever a new player has successfully connected</comment>
		</method>
		<method name="OnPlayerDisconnected" tag="Network">
			<parameter name="player" type="UnityEngine.NetworkPlayer"/>
			<comment>OnPlayerDisconnected is called on the server whenever a player disconnected from the server</comment>
		</method>
		<method name="OnSerializeNetworkView" tag="Network">
			<parameter name="stream" type="UnityEngine.BitStream"/>
			<parameter name="info" type="UnityEngine.NetworkMessageInfo"/>
			<comment>OnSerializeNetworkView is used to customize synchronization of variables in a script watched by a network view</comment>
		</method>
		<method name="OnServerInitialized" tag="Network">
			<comment>OnServerInitialized is called on the server whenever a Network.InitializeServer was invoked and has completed</comment>
		</method>
		<method name="OnCollisionEnter2D" tag="Physics">
			<parameter name="coll" type="UnityEngine.Collision2D"/>
			<comment>OnCollisionEnter2D sent when an incoming collider makes contact with this object's collider (2D physics only)</comment>
		</method>
		<method name="OnCollisionExit" tag="Physics">
			<parameter name="collision" type="UnityEngine.Collision"/>
			<comment>OnCollisionExit is called when this collider/rigidbody has stopped touching another rigidbody/collider</comment>
		</method>
		<method name="OnCollisionExit2D" tag="Physics">
			<parameter name="coll" type="UnityEngine.Collision2D"/>
			<comment>OnCollisionExit2D sent when a collider on another object stops touching this object's collider (2D physics only)</comment>
		</method>
		<method name="OnCollisionStay" tag="Physics">
			<parameter name="collision" type="UnityEngine.Collision"/>
			<comment>OnCollisionStay is called once per frame for every collider/rigidbody that is touching rigidbody/collider</comment>
		</method>
		<method name="OnCollisionStay2D" tag="Physics">
			<parameter name="coll" type="UnityEngine.Collision2D"/>
			<comment>OnCollisionStay2D sent each frame where a collider on another object is touching this object's collider (2D physics only)</comment>
		</method>
		<method name="OnControllerColliderHit" tag="Physics">
			<parameter name="hit" type="UnityEngine.OnControllerColliderHit"/>
			<comment>OnControllerColliderHit is called when the controller hits a collider while performing a Move</comment>
		</method>
		<method name="OnParticleCollision" tag="Physics">
			<parameter name="other" type="UnityEngine.GameObject"/>
			<comment>OnParticleCollision is called when a particle hits a collider</comment>
		</method>
		<method name="OnTriggerEnter" tag="Physics">
			<parameter name="other" type="UnityEngine.Collider"/>
			<comment>OnTriggerEnter is called when the Collider other enters the trigger</comment>
		</method>
		<method name="OnTriggerExit" tag="Physics">
			<parameter name="other" type="UnityEngine.Collider"/>
			<comment>OnTriggerExit is called when the Collider other has stopped touching the trigger</comment>
		</method>
		<method name="OnTriggerStay" tag="Physics">
			<parameter name="other" type="UnityEngine.Collider"/>
			<comment>OnTriggerStay is called once per frame for every Collider other that is touching the trigger</comment>
		</method>
		<method name="OnMouseDown" tag="Input">
			<comment>OnMouseDown is called when the user has pressed the mouse button while over the GUIElement or Collider</comment>
		</method>
		<method name="OnMouseDrag" tag="Input">
			<comment>OnMouseDrag is called when the user has clicked on a GUIElement or Collider and is still holding down the mouse</comment>
		</method>
		<method name="OnMouseEnter" tag="Input">
			<comment>OnMouseEnter is called when the mouse entered the GUIElement or Collider</comment>
		</method>
		<method name="OnMouseExit" tag="Input">
			<comment>OnMouseExit is called when the mouse is not any longer over the GUIElement or Collider</comment>
		</method>
		<method name="OnMouseOver" tag="Input">
			<comment>OnMouseOver is called every frame while the mouse is over the GUIElement or Collider</comment>
		</method>
		<method name="OnMouseUp" tag="Input">
			<comment>OnMouseUp is called when the user has released the mouse button</comment>
		</method>
		<method name="OnMouseUpAsButton" tag="Input">
			<comment>OnMouseUpAsButton is only called when the mouse is released over the same GUIElement or Collider as it was pressed</comment>
		</method>
		<method name="OnBecameInvisible" tag="Rendering">
			<comment>OnBecameInvisible is called when the renderer is no longer visible by any camera</comment>
		</method>
		<method name="OnBecameVisible" tag="Rendering">
			<comment>OnBecameVisible is called when the renderer became visible by any camera</comment>
		</method>
		<method name="OnPostRender" tag="Rendering">
			<comment>OnPostRender is called after a camera finished rendering the scene</comment>
		</method>
		<method name="OnPreCull" tag="Rendering">
			<comment>OnPreCull is called before a camera culls the scene</comment>
		</method>
		<method name="OnPreRender" tag="Rendering">
			<comment>OnPreRender is called before a camera starts rendering the scene</comment>
		</method>
		<method name="OnRenderImage" tag="Rendering">
			<parameter name="src" type="UnityEngine.RenderTexture"/>
			<parameter name="dest" type="UnityEngine.RenderTexture"/>
			<comment>OnRenderImage is called after all rendering is complete to render image</comment>
		</method>
		<method name="OnRenderObject" tag="Rendering">
			<comment>OnRenderObject is called after camera has rendered the scene</comment>
		</method>
		<method name="OnWillRenderObject" tag="Rendering">
			<comment>OnWillRenderObject is called once for each camera if the object is visible</comment>
		</method>
		<method name="OnAnimatorIK" tag="Other">
			<parameter name="layerIndex" type="System.Int32"/>
			<comment>OnAnimatorIK is the callback for setting up animation IK (inverse kinematics)</comment>
		</method>
		<method name="OnAnimatorMove" tag="Other">
			<comment>OnAnimatorMove is the callback for processing animation movements for modifying root motion</comment>
		</method>
		<method name="OnAudioFilterRead" tag="Other">
			<parameter name="data" type="System.Single[]"/>
			<parameter name="channels" type="System.Int32"/>
			<comment>If OnAudioFilterRead is implemented, Unity will insert a custom filter into the audio DSP chain</comment>
		</method>
		<method name="OnDrawGizmos" tag="Other">
			<comment>OnDrawGizmos is implemented if you want to draw gizmos that are also pickable and always drawn</comment>
		</method>
		<method name="OnDrawGizmosSelected" tag="Other">
			<comment>OnDrawGizmosSelected is implemented if you want to draw gizmos only if the object is selected</comment>
		</method>
		<method name="OnJointBreak" tag="Other">
			<parameter name="breakForce" type="System.Single"/>
			<comment>OnJointBreak is called when a joint attached to the same game object broke</comment>
		</method>
		<method name="OnTransformChildrenChange" tag="Other">
			<comment>OnTransformChildrenChange is called when the list of children of the transform of the GameObject has changed</comment>
		</method>
		<method name="OnTransformParentChanged" tag="Other">
			<comment>OnTransformParentChanged is called when the parent property of the transform of the GameObject has changed</comment>
		</method>
		<method name="Reset" tag="Other">
			<comment>Reset to default values</comment>
		</method>
	</MonoBehaviour>
	<Editor>
		<method name="DrawPreview" override="true">
			<parameter name="previewArea" type="UnityEngine.Rect"/>
			<comment>The first entry point for Preview Drawing.Draws a grid of previews if there are multiple targets available. Override this method if you want to customize this behaviour</comment>
		</method>
		<method name="GetInfoString" override="true" return="System.String">
			<comment>Implement this method to show asset information on top of the asset preview</comment>
		</method>
		<method name="GetPreviewTitle" override="true" return="UnityEngine.GUIContent">
			<comment>Override this method if you want to change the label of the Preview area</comment>
		</method>
		<method name="HasPreviewGUI" override="true" return="System.Boolean">
			<comment>Override this method in subclasses if you implement OnPreviewGUI</comment>
		</method>
		<method name="OnHeaderGUI" override="true"/>
		<method name="OnInspectorGUI" override="true">
			<comment>Implement this function to make a custom inspector</comment>
		</method>
		<method name="OnInteractivePreviewGUI" override="true">
			<parameter name="r" type="UnityEngine.Rect"/>
			<parameter name="background" type="UnityEngine.GUIStyle"/>
			<comment>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector</comment>
		</method>
		<method name="OnPreviewGUI" override="true">
			<parameter name="r" type="UnityEngine.Rect"/>
			<parameter name="background" type="UnityEngine.GUIStyle"/>
			<comment>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector</comment>
		</method>
		<method name="OnPreviewSettings" override="true">
			<comment>Override this method if you want to show custom controls in the preview header</comment>
		</method>
		<method name="ReloadPreviewInstances" override="true"/>
		<method name="RequiresConstantRepaint" override="true" return="System.Boolean">
			<comment>Does this edit require to be repainted constantly in its current state</comment>
		</method>
		<method name="UseDefaultMargins" override="true" return="System.Boolean">
			<comment>Override this method in subclasses to return false if you don't want default margins</comment>
		</method>
		<method name="RenderStaticPreview" override="true" return="UnityEngine.Texture2D">
			<parameter name="assetPath" type="System.String"/>
			<parameter name="subAssets" type="UnityEngine.Object[]"/>
			<parameter name="width" type="System.Int32"/>
			<parameter name="height" type="System.Int32"/>
			<comment>Override this method if you want to render a static preview that shows</comment>
		</method>
	</Editor>
</template>